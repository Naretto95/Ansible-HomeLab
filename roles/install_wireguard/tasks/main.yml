---

- name: Create WireGuard configuration directory
  ansible.builtin.file:
    path: /etc/wireguard
    state: directory
    mode: "0700"

- name: Check if private key exists
  ansible.builtin.stat:
    path: "/etc/wireguard/{{ wireguard_interface }}.key"
  register: wg_key_file

- block:
    - name: Generate private key for WireGuard
      ansible.builtin.command: wg genkey
      register: wg_private
      changed_when: false
      check_mode: no

    - name: Save WireGuard private key
      ansible.builtin.copy:
        content: "{{ wg_private.stdout | trim }}"
        dest: "/etc/wireguard/{{ wireguard_interface }}.key"
        owner: root
        group: root
        mode: "0600"
  when: not wg_key_file.stat.exists

- name: Generate public key from private key file
  ansible.builtin.command: "wg pubkey < /etc/wireguard/{{ wireguard_interface }}.key"
  register: wg_public
  changed_when: false

- name: Save WireGuard public key
  ansible.builtin.copy:
    content: "{{ wg_public.stdout | trim }}"
    dest: "/etc/wireguard/{{ wireguard_interface }}.pub"
    owner: root
    group: root
    mode: "0644"

- name: Check if WireGuard config exists on host
  ansible.builtin.stat:
    path: "/etc/wireguard/{{ wireguard_interface }}.conf"
  register: wg_conf

- name: Save WireGuard configuration
  ansible.builtin.copy:
    dest: "/etc/wireguard/{{ wireguard_interface }}.conf"
    content: |
      [Interface]
      Address = {{ wireguard_ip }}/{{ wireguard_subnet }}
      ListenPort = {{ wireguard_port }}
      PrivateKey = /etc/wireguard/{{ wireguard_interface }}.key

      {% if wireguard_client_public_key != 'none' %}
      [Peer]
      PublicKey = {{ wireguard_client_public_key }}
      AllowedIPs = {{ allowed_ips | join(', ') }}
      {% endif %}
    mode: "0600"

- name: Enable IPv4 forwarding
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true

- name: Configure NAT to allow VPN clients to access LAN
  ansible.builtin.iptables:
    table: nat
    chain: POSTROUTING
    source: "{{ wireguard_network }}"
    out_interface: eth0
    jump: MASQUERADE
    state: present

- name: Enable and start WireGuard interface
  ansible.builtin.systemd:
    name: "wg-quick@{{ wireguard_interface }}"
    enabled: true
    state: started

- name: Print WireGuard public key
  ansible.builtin.debug:
    msg: "WireGuard public key: {{ wg_public.stdout | trim }}"